library(ggplot2)
library(grid)
library(cowplot)
setwd('~/Dropbox/new.projects/galati.perspective.review/simulation/')
install.packages('cowplot')
u_y = .2 # speed at which they update
u_x = .2
k_x = 0 # tilt of systems
k_y = 0
sigm = .01 # noise impulse
alph = .01 # how much they influence each other, as in equations
bet = .01
u_x=.2,
u_y=.1,
k_x=.2,
k_y=0,
sigm=.01,
alph=.0,
bet=.0
data.frame(perspective=as.factor(c('Other','Ego')[choice_txt]))
ln = 100 # how long until it defaults exit
threshold = 30 # threshold in drift/diffusion
clrs = c('red','blue')
choices = c() # perspective choice for histogram
for (j in 1:50) { # no. of trials
xy = c()
x=0;y=0
sum_x = 0
sum_y = 0
ix = 0
for (i in 1:ln) { # run for at most 100, but keep a running sum and...
d_x = alph*(y-x)
d_y = bet*(x-y)
x = x + u_x*(-k_x + x - x^3)+d_x+sigm*(rnorm(1))
y = y + u_y*(-k_y + y - y^3)+d_y+sigm*(rnorm(1))
sum_x = sum_x + x
sum_y = sum_y + y
if (abs(sum_x)>threshold | abs(sum_y)>threshold) { # ... quit when we are at threshold
ix_which = which.max(c(abs(sum_x),abs(sum_y)))
ix = sign(c(x,y)[ix_which])
xy = rbind(xy,data.frame(x,y,ix,sum_x,sum_y))
break
}
xy = rbind(xy,data.frame(x,y,ix,sum_x,sum_y))
}
vectorField=vectorField+
geom_line(data=xy,aes(x=x,y=y))
#vectorField<<-vectorField+
#geom_point(data=xy[1,],aes(x=x,y=y),shape=15,size=5)
Vx = u_x*(k_x*xy$x - xy$x^2/2 + xy$x^4/4)+runif(1)*u_x/7
potentialXP=potentialXP+geom_line(data=data.frame(y=Vx,x=xy$x),aes(x=x,y=y))
Vy = u_y*(k_y*xy$y - xy$y^2/2 + xy$y^4/4)+runif(1)*u_y/7
potentialXS=potentialXS+geom_line(data=data.frame(y=Vy,x=xy$y),aes(x=x,y=y))
if (ix_which==1) {
potentialXP=potentialXP+geom_point(data=data.frame(y=Vx,x=xy$x)[nrow(xy),],aes(x=x,y=y),colour='black',size=3,shape=15)
} else {
potentialXS=potentialXS+geom_point(data=data.frame(y=Vy,x=xy$y)[nrow(xy),],aes(x=x,y=y),colour='black',size=3,shape=15)
}
choices = c(choices,ix)
#points(0,0,pch=15,cex=2,col='green')
#points(xy[,1],xy[,2],type='l')
#points(xy[nrow(xy),1],xy[nrow(xy),2],pch=ix+15,cex=2,col='red')
}
choice_txt = abs((choices-1)/2)+1 # flips to Ego = 2, Other = 1
dt = data.frame(perspective=as.factor(c('Other','Ego')[choice_txt]))
dt
choices
x = seq(from=-1.5,to=1.5,by=.01) # potential well for each variable
VP = u_x*(k_x*x - x^2/2 + x^4/4)
VS = u_y*(k_y*x - x^2/2 + x^4/4)
potentialXP = ggplot(data=data.frame(x,VP),aes(x=x,y=VP))+geom_line(colour='gray',size=2)+xlab(expression('x'[P]))+ylab(expression('V'[P]))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),axis.text.y=element_blank())
potentialXS = ggplot(data=data.frame(V=VS,x=x),aes(x=x,y=VS))+geom_line(colour='gray',size=2)+xlab(expression('x'[S]))+ylab(expression('V'[S]))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),axis.text.x=element_blank())+coord_flip()
x_seed = seq(from=-1.5,to=1.5,by=.1) # grid to show full vector field
x = expand.grid(x_seed,x_seed)[,1]
y = expand.grid(x_seed,x_seed)[,2]
dx = u_x*(-k_x + x - x^3)+alph*(y-x) # how x/y are changing to determine arrow size
dy = u_y*(-k_y + y - y^3)+bet*(x-y)
df = data.frame(x,y,dx,dy)
vectorField = ggplot(data=df, aes(x=x, y=y)) + xlab(expression('x'[P]))+ylab(expression('x'[S]))+
geom_segment(aes(xend=x+dx, yend=y+dy),
arrow = arrow(length = unit(0.1,"cm")),col='gray')+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
ln = 100 # how long until it defaults exit
threshold = 30 # threshold in drift/diffusion
clrs = c('red','blue')
choices = c() # perspective choice for histogram
for (j in 1:50) { # no. of trials
xy = c()
x=0;y=0
sum_x = 0
sum_y = 0
ix = 0
for (i in 1:ln) { # run for at most 100, but keep a running sum and...
d_x = alph*(y-x)
d_y = bet*(x-y)
x = x + u_x*(-k_x + x - x^3)+d_x+sigm*(rnorm(1))
y = y + u_y*(-k_y + y - y^3)+d_y+sigm*(rnorm(1))
sum_x = sum_x + x
sum_y = sum_y + y
if (abs(sum_x)>threshold | abs(sum_y)>threshold) { # ... quit when we are at threshold
ix_which = which.max(c(abs(sum_x),abs(sum_y)))
ix = sign(c(x,y)[ix_which])
xy = rbind(xy,data.frame(x,y,ix,sum_x,sum_y))
break
}
xy = rbind(xy,data.frame(x,y,ix,sum_x,sum_y))
}
vectorField=vectorField+
geom_line(data=xy,aes(x=x,y=y))
#vectorField<<-vectorField+
#geom_point(data=xy[1,],aes(x=x,y=y),shape=15,size=5)
Vx = u_x*(k_x*xy$x - xy$x^2/2 + xy$x^4/4)+runif(1)*u_x/7
potentialXP=potentialXP+geom_line(data=data.frame(y=Vx,x=xy$x),aes(x=x,y=y))
Vy = u_y*(k_y*xy$y - xy$y^2/2 + xy$y^4/4)+runif(1)*u_y/7
potentialXS=potentialXS+geom_line(data=data.frame(y=Vy,x=xy$y),aes(x=x,y=y))
if (ix_which==1) {
potentialXP=potentialXP+geom_point(data=data.frame(y=Vx,x=xy$x)[nrow(xy),],aes(x=x,y=y),colour='black',size=3,shape=15)
} else {
potentialXS=potentialXS+geom_point(data=data.frame(y=Vy,x=xy$y)[nrow(xy),],aes(x=x,y=y),colour='black',size=3,shape=15)
}
choices = c(choices,ix)
#points(0,0,pch=15,cex=2,col='green')
#points(xy[,1],xy[,2],type='l')
#points(xy[nrow(xy),1],xy[nrow(xy),2],pch=ix+15,cex=2,col='red')
}
choice_txt = abs((choices-1)/2)+1 # flips to Ego = 2, Other = 1
dt = data.frame(perspective=as.factor(c('Other','Ego')[choice_txt]))
dt
data.frame(ct=1,perspective=as.factor(c('Other','Ego')[choice_txt]))
ggplot(dt, aes(perspective))+geom_bar()
dt = rbind(dt,data.frame(ct=NA,perspective='Other')) # in case it's 100% on the other side...
dt = rbind(dt,data.frame(ct=NA,perspective='Ego')) # ... we get a 0 bar
dt
dt = data.frame(ct=1,perspective=as.factor(c('Other','Ego')[choice_txt]))
dt = rbind(dt,data.frame(ct=NA,perspective='Other')) # in case it's 100% on the other side...
dt = rbind(dt,data.frame(ct=NA,perspective='Ego')) # ... we get a 0 bar
dt
ggplot(dt, aes(perspective))+geom_bar()
dt = aggregate(dt$ct,by=dt$perspective,count)
dt = aggregate(dt$ct,by=dt$perspective,count)
dt = aggregate(dt$ct,by=dt$perspective,sum)
dt = aggregate(dt$ct,by=list(dt$perspective),sum)
dt
help(aggregate)
choice_txt = abs((choices-1)/2)+1 # flips to Ego = 2, Other = 1
dt = data.frame(ct=1,perspective=as.factor(c('Other','Ego')[choice_txt]))
dt = rbind(dt,data.frame(ct=0,perspective='Other')) # in case it's 100% on the other side...
dt = rbind(dt,data.frame(ct=0,perspective='Ego')) # ... we get a 0 bar
dt = aggregate(dt$ct,by=list(dt$perspective),sum)
dt
ggplot(dt, aes(x=perspective,y=x))+geom_bar()+xlab('Perspective')
dt = aggregate(dt$ct,by=list(dt$perspective),sum)
ggplot(dt, aes(x=perspective,y=x))+geom_bar()+xlab('Perspective')
ggplot(dt, aes(x=Group.1,y=x))+geom_bar()+xlab('Perspective')
ggplot(dt, aes(x=Group.1,y=x))+xlab('Perspective')
histoResponse = ggplot(dt, aes(x=Group.1,y=x))+geom_bar()+xlab('Perspective')
ggplot(dt, aes(x=Group.1,y=x))+geom_bar()+xlab('Perspective')
ggplot(dt, aes(x=Group.1))+geom_bar()+xlab('Perspective')
qplot(dt, aes(x=Group.1,y=x))+geom_bar()+xlab('Perspective')
qplot(data=dt, aes(x=Group.1,y=x))+geom_bar()+xlab('Perspective')
help(ggplot)
ggplot(data=dt, aes(x=Group.1,y=x))+xlab('Perspective')
histoResponse = ggplot(data=dt, aes(x=Group.1,y=x))+geom_point()+xlab('Perspective')
ggplot(data=dt, aes(x=Group.1,y=x))+geom_point()+xlab('Perspective')
ggplot(data=dt, aes(x=Group.1,y=x))+geom_point(size=5)+xlab('Perspective')
ggplot(data=dt, aes(x=Group.1,y=x))+geom_point(size=5)+xlab('Perspective')+ylab('Count')
ggplot(data=dt, aes(x=Group.1,y=x))+geom_point(size=5)+xlab('Perspective')+ylab('Trial count')
ggplot(data=dt, aes(x=Group.1,y=x))+geom_point(size=5,marker=15)+xlab('Perspective')+ylab('Trial count')
ggplot(data=dt, aes(x=Group.1,y=x))+geom_point(size=5,marker=12)+xlab('Perspective')+ylab('Trial count')
ggplot(data=dt, aes(x=Group.1,y=x))+geom_point(size=5,pch=12)+xlab('Perspective')+ylab('Trial count')
ggplot(data=dt, aes(x=Group.1,y=x))+geom_point(size=5,pch=15)+xlab('Perspective')+ylab('Trial count')
xlim
head(ylim)
help(ylim)
ggplot(data=dt, aes(x=Group.1,y=x))+geom_point(size=5,pch=15)+xlab('Perspective')+ylab('Trial count')+ylim(0,100)
ggplot(data=dt, aes(x=Group.1,y=x))+geom_point(size=5,pch=15)+xlab('Perspective')+ylab('Trial count')+ylim(0,50)
#########################################################################
#
# coded by Rick Dale
# Based on Duran and Dale (2014) and as part of Dale, Galati et al., Frontiers Submission
#
#########################################################################
library(ggplot2)
library(grid)
library(cowplot)
setwd('~/Dropbox/new.projects/galati.perspective.review/simulation/')
###
# Figure of 1 state variable potential wells
###
pdf(file='sim_figures/1_state_well.pdf',height=4.5,width=8)
par(mfrow=c(1,2))
x = seq(from=-2,to=2,by=.01)
V = (0*x - x^2/2 + x^4/4)
plot(x,V,xlab='x',type='l',lwd=2)
text(-1,.5,'ego')
text(1,.5,'other')
for (i in 1) {
print(i)
x_trial = c()
x = 0
k = 0
x_sum = 0
for (j in 1:1000) {
#x_trial = rbind(x_trial,data.frame(t=j,x=x,x2=x^2,x3=x^3,k=k))
x_trial = rbind(x_trial,data.frame(k=k,x=x,x_sum=x_sum))
lx = x
x = x + (-k + x - x^3) + rnorm(1)*.05
x_sum = x_sum + x
if (abs(x_sum)>30) {
#points()
ys = (0*x_trial$x - x_trial$x^2/2 + x_trial$x^4/4)
points(x_trial$x,ys+.1,col='red',type='o')
plot(x_trial$x_sum,type='o',xlim=c(0,nrow(x_trial)),ylim=c(-30,30),xlab='Iteration (t)',ylab='Sum(x)',col='red')
break;
}
}
}
dev.off()
###
# Figure of 2-state system; equibiased
###
u_y = .2 # speed at which they update
u_x = .2
k_x = 0 # tilt of systems
k_y = 0
sigm = .01 # noise impulse
alph = .01 # how much they influence each other, as in Eq. 3
bet = .01
pdf(file='sim_figures/2_state_well_equibiased.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.2,
k_x=0,
k_y=0,
sigm=.01,
alph=.0,
bet=.0)
dev.off()
###
# Ego is really fast, slow has no time to accumulate and win
###
pdf(file='sim_figures/3_state_well_egofast.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.1,
k_x=.2,
k_y=0,
sigm=.01,
alph=.0,
bet=.0)
dev.off()
###
# Social can take over entirely if we assume top-down control
###
pdf(file='sim_figures/4_state_well_social_set.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.1,
k_x=.2,
k_y=-.2,
sigm=.01,
alph=.2,
bet=.0)
dev.off()
###
# Mutually reinforcing responses
###
pdf(file='sim_figures/5_mutually_reinforcing.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.1,
k_x=.2,
k_y=-.025,
sigm=.01,
alph=0.2,
bet=0.01)
dev.off()
#########################################################################
#
# coded by Rick Dale
# Based on Duran and Dale (2014) and as part of Dale, Galati et al., Frontiers Submission
#
#########################################################################
library(ggplot2)
library(grid)
library(cowplot)
source('functions.R')
setwd('~/Dropbox/new.projects/galati.perspective.review/simulation/')
###
# Figure of 1 state variable potential wells
###
pdf(file='sim_figures/1_state_well.pdf',height=4.5,width=8)
par(mfrow=c(1,2))
x = seq(from=-2,to=2,by=.01)
V = (0*x - x^2/2 + x^4/4)
plot(x,V,xlab='x',type='l',lwd=2)
text(-1,.5,'ego')
text(1,.5,'other')
for (i in 1) {
print(i)
x_trial = c()
x = 0
k = 0
x_sum = 0
for (j in 1:1000) {
#x_trial = rbind(x_trial,data.frame(t=j,x=x,x2=x^2,x3=x^3,k=k))
x_trial = rbind(x_trial,data.frame(k=k,x=x,x_sum=x_sum))
lx = x
x = x + (-k + x - x^3) + rnorm(1)*.05
x_sum = x_sum + x
if (abs(x_sum)>30) {
#points()
ys = (0*x_trial$x - x_trial$x^2/2 + x_trial$x^4/4)
points(x_trial$x,ys+.1,col='red',type='o')
plot(x_trial$x_sum,type='o',xlim=c(0,nrow(x_trial)),ylim=c(-30,30),xlab='Iteration (t)',ylab='Sum(x)',col='red')
break;
}
}
}
dev.off()
###
# Figure of 2-state system; equibiased
###
u_y = .2 # speed at which they update
u_x = .2
k_x = 0 # tilt of systems
k_y = 0
sigm = .01 # noise impulse
alph = .01 # how much they influence each other, as in Eq. 3
bet = .01
pdf(file='sim_figures/2_state_well_equibiased.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.2,
k_x=0,
k_y=0,
sigm=.01,
alph=.0,
bet=.0)
dev.off()
###
# Ego is really fast, slow has no time to accumulate and win
###
pdf(file='sim_figures/3_state_well_egofast.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.1,
k_x=.2,
k_y=0,
sigm=.01,
alph=.0,
bet=.0)
dev.off()
###
# Social can take over entirely if we assume top-down control
###
pdf(file='sim_figures/4_state_well_social_set.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.1,
k_x=.2,
k_y=-.2,
sigm=.01,
alph=.2,
bet=.0)
dev.off()
###
# Mutually reinforcing responses
###
pdf(file='sim_figures/5_mutually_reinforcing.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.1,
k_x=.2,
k_y=-.025,
sigm=.01,
alph=0.2,
bet=0.01)
dev.off()
#########################################################################
#
# coded by Rick Dale
# Based on Duran and Dale (2014) and as part of Dale, Galati et al., Frontiers Submission
#
#########################################################################
library(ggplot2)
library(grid)
library(cowplot)
source('functions.R')
setwd('~/Dropbox/new.projects/galati.perspective.review/simulation/')
###
# Figure of 1 state variable potential wells
###
pdf(file='sim_figures/1_state_well.pdf',height=4.5,width=8)
par(mfrow=c(1,2))
x = seq(from=-2,to=2,by=.01)
V = (0*x - x^2/2 + x^4/4)
plot(x,V,xlab='x',type='l',lwd=2)
text(-1,.5,'ego')
text(1,.5,'other')
for (i in 1) {
print(i)
x_trial = c()
x = 0
k = 0
x_sum = 0
for (j in 1:1000) {
#x_trial = rbind(x_trial,data.frame(t=j,x=x,x2=x^2,x3=x^3,k=k))
x_trial = rbind(x_trial,data.frame(k=k,x=x,x_sum=x_sum))
lx = x
x = x + (-k + x - x^3) + rnorm(1)*.05
x_sum = x_sum + x
if (abs(x_sum)>30) {
#points()
ys = (0*x_trial$x - x_trial$x^2/2 + x_trial$x^4/4)
points(x_trial$x,ys+.1,col='red',type='o')
plot(x_trial$x_sum,type='o',xlim=c(0,nrow(x_trial)),ylim=c(-30,30),xlab='Iteration (t)',ylab='Sum(x)',col='red')
break;
}
}
}
dev.off()
###
# Figure of 2-state system; equibiased
###
u_y = .2 # speed at which they update
u_x = .2
k_x = 0 # tilt of systems
k_y = 0
sigm = .01 # noise impulse
alph = .01 # how much they influence each other, as in Eq. 3
bet = .01
pdf(file='sim_figures/2_state_well_equibiased.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.2,
k_x=0,
k_y=0,
sigm=.01,
alph=.0,
bet=.0)
dev.off()
###
# Ego is really fast, slow has no time to accumulate and win
###
pdf(file='sim_figures/3_state_well_egofast.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.1,
k_x=.2,
k_y=0,
sigm=.01,
alph=.0,
bet=.0)
dev.off()
###
# Social can take over entirely if we assume top-down control
###
pdf(file='sim_figures/4_state_well_social_set.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.1,
k_x=.2,
k_y=-.2,
sigm=.01,
alph=.2,
bet=.0)
dev.off()
###
# Mutually reinforcing responses
###
pdf(file='sim_figures/5_mutually_reinforcing.pdf',height=7,width=7)
run_and_plot(u_x=.2,
u_y=.1,
k_x=.2,
k_y=-.025,
sigm=.01,
alph=0.2,
bet=0.01)
dev.off()
library(ggplot2)
library(grid)
library(cowplot)
source('functions.R')
setwd('~/Dropbox/new.projects/galati.perspective.review/simulation/')
source('functions.R')
run_and_plot(u_x=.2,
u_y=.1,
k_x=.2,
k_y=-.2,
sigm=.01,
alph=.2,
bet=.0)
